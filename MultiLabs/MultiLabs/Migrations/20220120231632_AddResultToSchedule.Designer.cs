// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiLabs.Data;

namespace MultiLabs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220120231632_AddResultToSchedule")]
    partial class AddResultToSchedule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "LabManager",
                            NormalizedName = "LABMANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3",
                            Name = "LabTester",
                            NormalizedName = "LABTESTER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MultiLabs.Models.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("UserId");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("MultiLabs.Models.LaboratoryTest", b =>
                {
                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("LaboratoryId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("LaboratoryTests");
                });

            modelBuilder.Entity("MultiLabs.Models.LaboratoryTesters", b =>
                {
                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LaboratoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LaboratoryTesters");
                });

            modelBuilder.Entity("MultiLabs.Models.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("MultiLabs.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Results");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Negativo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Positivo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Inconclusivo"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Outro Valor"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Não realizado"
                        });
                });

            modelBuilder.Entity("MultiLabs.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("TesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("ResultId");

                    b.HasIndex("TestId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("MultiLabs.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("MultiLabs.Models.TimeSlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("MultiLabs.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0731efd8-f9aa-4d49-b8bb-1789aee221a8",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmUCea7xEr8Wkhoer2klid42Qrh7s4i6MCXLW1QxlMfTm04Hmx6fXNFRO/bLSRDLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8f9ef29-2cc0-450d-8c95-1eef79b6c2b3",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eff2b707-a761-47a9-9172-c465a83d860f",
                            Email = "tester6@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER6@GMAIL.COM",
                            NormalizedUserName = "TESTER6@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHby1xbXixNB6ZqtlWhf4y8zaEOpeohl0h81CwbjcLrEQymaxXkF7qOn+ve4UWq3Hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd0e22ae-329e-4cc3-8909-3139e34ca9a6",
                            TwoFactorEnabled = false,
                            UserName = "tester6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93946f4f-baf2-44ef-99b3-4ae341bfc519",
                            Email = "tester7@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER7@GMAIL.COM",
                            NormalizedUserName = "TESTER7@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELAtadK95ge7NQpHO1xCYG+TwyPdEs0kf0PisDM4z8A82Llqel4kgLRS6zAqsUv0hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8df4c6e2-79be-45db-b2c1-858efe08ed0a",
                            TwoFactorEnabled = false,
                            UserName = "tester7@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90872ff1-e898-41a4-b1e1-43ef6005bcc7",
                            Email = "tester8@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER8@GMAIL.COM",
                            NormalizedUserName = "TESTER8@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEITiNPyCZDodii0ZaIo/kfFMA/H8MilxbdeZa3Oe9/EvRGamrbxhikLke8ctPpAE9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "796ae4a3-7c89-4c8e-b674-9ee8e1f68eb8",
                            TwoFactorEnabled = false,
                            UserName = "tester8@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "956e6361-ccaf-488d-b3e9-8ad165c03509",
                            Email = "tester9@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER9@GMAIL.COM",
                            NormalizedUserName = "TESTER9@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKSadGU7VwvPHdV9usLEEoYxadmGB/iNgP9DRg5ZnvJt3vHIeslCL8vqNbmxYCIHig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c526ca75-7f32-464c-87d3-00831b2aafe3",
                            TwoFactorEnabled = false,
                            UserName = "tester9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6abb81f-bac1-467e-9aba-c5f20de99386",
                            Email = "tester10@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER10@GMAIL.COM",
                            NormalizedUserName = "TESTER10@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIiyx2lxTj3Nae/+FM/HFi+meiP3UfFYAHDBjod9QlY7nFCrZB37HA6bvGMNZpevbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5a19a49-f94b-4b39-847e-4de7d32033ff",
                            TwoFactorEnabled = false,
                            UserName = "tester10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08894c37-418b-4d00-b816-fa9e279902f5",
                            Email = "tester11@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER11@GMAIL.COM",
                            NormalizedUserName = "TESTER11@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE52lM8oHjqFv0NeGhwyYE6AsZlmloIuigpBkrOJx7x4gHFtFuXNK/W3WWap0v6IaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24bff8d4-3826-4205-b799-92362d5f57df",
                            TwoFactorEnabled = false,
                            UserName = "tester11@gmail.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71f953f5-9bc8-4ded-9abb-edbb295760e2",
                            Email = "tester12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER12@GMAIL.COM",
                            NormalizedUserName = "TESTER12@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9S6b8y7tI0VDmhdx8tYfuZF27jp6zT40RRv2KCYdZCdwBwVUp7AH9JeybIS9oRAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30648685-d8b1-46b3-8b56-eb781a578901",
                            TwoFactorEnabled = false,
                            UserName = "tester12@gmail.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb7fc09f-eb52-4eac-ad84-76fe40fc1ae4",
                            Email = "tester13@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER13@GMAIL.COM",
                            NormalizedUserName = "TESTER13@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlbEvQAjxZUtcP7CmMP+naX15cSKDIkgT6pJqPsWkHo7Hnu21iyaFwtgxq6dAfZEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d94987b-e9e2-4c17-9efe-72b481943f99",
                            TwoFactorEnabled = false,
                            UserName = "tester13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c944ee35-8e7d-4014-a93d-340fcc0ff565",
                            Email = "tester14@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER14@GMAIL.COM",
                            NormalizedUserName = "TESTER14@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9THuwkBCYOMWmwXu/TM2pAYlVV7DzqvbvxUniIQY9RKa0mMBlWEQT3KmTjXYXXuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00ce47aa-ac3b-445e-952d-aed97f8b452e",
                            TwoFactorEnabled = false,
                            UserName = "tester14@gmail.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6b4c373-7ca3-4e7c-b393-dd8cc49b9f4c",
                            Email = "tester15@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER15@GMAIL.COM",
                            NormalizedUserName = "TESTER15@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKbTCTU7j2Cx2BNeFzYaXhI/tXNh8s3TK4ABKYZamyWFfu9Vp7xNjYKWn9kfQmcPdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4edffc4f-1120-4f1b-8f71-2e1d06bae300",
                            TwoFactorEnabled = false,
                            UserName = "tester15@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MultiLabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MultiLabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiLabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MultiLabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiLabs.Models.Laboratory", b =>
                {
                    b.HasOne("MultiLabs.Models.Local", "Local")
                        .WithMany("Laboratories")
                        .HasForeignKey("LocalId");

                    b.HasOne("MultiLabs.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Local");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MultiLabs.Models.LaboratoryTest", b =>
                {
                    b.HasOne("MultiLabs.Models.Laboratory", "Laboratory")
                        .WithMany("LaboratoryTests")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiLabs.Models.Test", "Test")
                        .WithMany("LaboratoryTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("MultiLabs.Models.LaboratoryTesters", b =>
                {
                    b.HasOne("MultiLabs.Models.Laboratory", "Laboratory")
                        .WithMany("LaboratoryTesters")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiLabs.Models.User", "User")
                        .WithMany("LaboratoryTesters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MultiLabs.Models.Schedule", b =>
                {
                    b.HasOne("MultiLabs.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId");

                    b.HasOne("MultiLabs.Models.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("MultiLabs.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("Laboratory");

                    b.Navigation("Result");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("MultiLabs.Models.TimeSlots", b =>
                {
                    b.HasOne("MultiLabs.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("MultiLabs.Models.Laboratory", b =>
                {
                    b.Navigation("LaboratoryTesters");

                    b.Navigation("LaboratoryTests");
                });

            modelBuilder.Entity("MultiLabs.Models.Local", b =>
                {
                    b.Navigation("Laboratories");
                });

            modelBuilder.Entity("MultiLabs.Models.Test", b =>
                {
                    b.Navigation("LaboratoryTests");
                });

            modelBuilder.Entity("MultiLabs.Models.User", b =>
                {
                    b.Navigation("LaboratoryTesters");
                });
#pragma warning restore 612, 618
        }
    }
}
